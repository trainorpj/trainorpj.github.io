{
  "hash": "21fe3d6349804c4b4bb74ff33d1351e0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Simulating MTG Mana Problems\"\nformat: html\n---\n\n::: {#dfdbbe08 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport duckdb\nimport numpy as np\nimport plotnine as pn\n```\n:::\n\n\nHere's an example hand from a shuffled deck. \n\n::: {#296ac47a .cell execution_count=2}\n``` {.python .cell-code}\ndef make_deck():\n    deck = [\"Land\" for _ in range(17)]\n    deck.extend([\"Spell\" for _ in range(23)])\n    np.random.shuffle(deck)\n    return deck\n\ndef get_counts(cards):\n    return pd.Series(cards).value_counts()\n\n# example first hand\nget_counts(make_deck()[:7])\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nSpell    4\nLand     3\nName: count, dtype: int64\n```\n:::\n:::\n\n\nHow many lands should we expect to have in our opening hand? We could model this with a hypergeometric distribution, but I don't like that simulation very much ... simulation to the rescue!\n\nIt looks like ~50% of the time we have 3 or 4 lands, which is the ideal number.\n\n::: {#c2695b7c .cell execution_count=3}\n``` {.python .cell-code}\nnum_sim = 101\nopening_hands = (\n    pd.DataFrame({\n        i: get_counts(make_deck()[:7])\n        for i in range(num_sim)\n    })\n    .T\n    .fillna(0)\n)\n\n(\n    pn.ggplot(data=opening_hands) +\n    pn.stat_ecdf(pn.aes(\"Land\"))\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](mtg-mana-problems_files/figure-html/cell-4-output-1.png){width=672 height=480}\n:::\n:::\n\n\nSuppose you decide to keep any hand, e.g. one with 2 lands and 5 spells. You'll draw a card each turn, so how many lands should you expect to get?\n\n::: {#3c8300a9 .cell execution_count=4}\n``` {.python .cell-code}\ndef get_turn_counts(deck, num_start=7, num_draws=6):\n    counts = {\n        i: get_counts(deck[:(num_start+i)])\n        for i in range(num_draws+1)\n    }\n    return (\n        pd.DataFrame(counts).T\n        .reset_index(names=[\"draw\"])\n        .fillna(0)\n    )\n\n# example\nget_turn_counts(make_deck())\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>draw</th>\n      <th>Spell</th>\n      <th>Land</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>5</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>6</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>7</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>7</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>7</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>6</td>\n      <td>8</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNow let's simulate many draws. We can see:\n\n- Our turn 0 results hold; ~50% of the time you have 3-4 lands (good), ~35% of the time you have 2 or fewer Lands (bad).\n- By your 2nd draw, ~60% of the time you've drawn 3-5 lands, and there's a 15% chance you've only drawn 2 or fewer lands.\n\n::: {#aa97033e .cell execution_count=5}\n``` {.python .cell-code}\ndraw_sims = (\n    pd.concat([\n        get_turn_counts(make_deck()).assign(sim_id=i)\n        for i in range(num_sim)\n    ], ignore_index=True)\n)\n\n(\n    duckdb.sql(\"\"\"\n    select \n        draw\n        , Land\n        , count(*) as num\n        , SUM(COUNT(*)) OVER (partition by draw) as num_draws\n        , num / num_draws AS draw_frac\n    from draw_sims \n    group by draw, Land\n    order by draw\n    \"\"\")\n    .to_df()\n    .pipe(pn.ggplot)\n    + pn.geom_tile(pn.aes(\"draw\", \"Land\", fill=\"draw_frac\"))\n    + pn.geom_text(pn.aes(\"draw\", \"Land\", label=\"round(draw_frac, 2)\"))\n    + pn.scale_fill_continuous(cmap_name=\"Blues\")\n    + pn.labs(y=\"total lands drawn\", x=\"draw\")\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](mtg-mana-problems_files/figure-html/cell-6-output-1.png){width=672 height=480}\n:::\n:::\n\n\n::: {#5a4ac657 .cell execution_count=6}\n``` {.python .cell-code}\n(\n    pn.ggplot(draw_sims)\n    + pn.stat_ecdf(pn.aes(\"Land\"))\n    + pn.facet_wrap(\"draw\", labeller=\"label_both\")\n    + pn.labs(title=\"Total Lands Drawn\")\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](mtg-mana-problems_files/figure-html/cell-7-output-1.png){width=672 height=480}\n:::\n:::\n\n\n## Mulligans\n\nYou have the option to \"mulligan\" your opening hand, e.g. you can shuffle, re-draw 7 cards, then put one on the bottom of your deck.\n\nYou can do this several times, but you probably shouldn't go lower than 5.\n\n::: {#3af38677 .cell execution_count=7}\n``` {.python .cell-code}\ndef make_deck_with_mulligan(\n    num_start=7, \n    num_mulligans=2,\n    keep_bounds=(3,4)\n):\n    while num_mulligans > 0:\n        deck = make_deck()\n        # mulligan check\n        counts = get_counts(deck[:num_start])\n        # TODO discard spells\n        if keep_bounds[0] <= counts.Land <= keep_bounds[1]:\n            return deck\n        num_mulligans -= 1\n    return deck\n\nmake_deck_with_mulligan()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n['Spell',\n 'Land',\n 'Spell',\n 'Land',\n 'Land',\n 'Spell',\n 'Spell',\n 'Land',\n 'Spell',\n 'Spell',\n 'Spell',\n 'Spell',\n 'Spell',\n 'Land',\n 'Spell',\n 'Land',\n 'Land',\n 'Land',\n 'Land',\n 'Spell',\n 'Spell',\n 'Land',\n 'Land',\n 'Spell',\n 'Land',\n 'Land',\n 'Spell',\n 'Spell',\n 'Spell',\n 'Spell',\n 'Spell',\n 'Spell',\n 'Land',\n 'Land',\n 'Land',\n 'Spell',\n 'Spell',\n 'Spell',\n 'Land',\n 'Spell']\n```\n:::\n:::\n\n\n",
    "supporting": [
      "mtg-mana-problems_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}